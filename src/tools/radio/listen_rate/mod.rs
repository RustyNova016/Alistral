use chrono::prelude::Utc;
use chrono::Duration;
use futures::stream;
use futures::StreamExt;
use itertools::Itertools;

use crate::core::entity_traits::mbid::IsMbid;
use crate::core::statistics::listen_rate::ListenRate;
use crate::core::statistics::listen_rate::ListenRateRange;
use crate::models::data::listenbrainz::user_listens::UserListens;
use crate::models::data::musicbrainz::mbid::extensions::VecATExt;
use crate::models::radio::RadioConfig;
use crate::utils::playlist::PlaylistStub;

pub async fn listen_rate_radio(
    username: &str,
    token: &str,
    min_rate: Option<ListenRate>,
    min_listens: Option<u64>,
    cooldown: u64,
    config: RadioConfig,
) -> color_eyre::Result<()> {
    let mut listens = UserListens::get_user_with_refresh(username)
        .await
        .expect("Couldn't fetch the new listens")
        .get_mapped_listens();

    let deadline = Utc::now() - Duration::hours(cooldown as i64);
    let blacklisted_recordings = listens
        .get_listened_after(&deadline)
        .into_iter()
        .map(|listen| {
            listen
                .get_mapping_data()
                .as_ref()
                .expect("The listen should be mapped!")
                .recording_mbid()
                .clone()
        })
        .collect_vec();

    // Filter out all the listens of blacklisted recordings
    listens.retain(|listen| {
        listen.get_mapping_data().as_ref().is_some_and(|mapping| {
            !blacklisted_recordings.contains(&mapping.recording_mbid.clone())
        })
    });

    let mut scores = listens
        .get_listen_rates()
        .await
        .expect("Couldn't calculate the listens rates");

    // Filter minimum
    scores.retain(|rate| *rate.1.listen_count() > min_listens.unwrap_or(3_u64));

    // Filter minimum rate
    if let Some(min_rate) = min_rate {
        scores.retain(|rate| {
            rate.1.get_listen_rate(ListenRateRange::Year)
                >= min_rate.get_listen_rate(ListenRateRange::Year)
        });
    }

    // Sort
    scores.sort_by_cached_key(|rate| rate.1.get_listen_rate(ListenRateRange::Year));

    let scores_as_recording = stream::iter(scores.clone())
        .map(|(_, rate)| async move { rate.recording().get_or_fetch_entity().await })
        .buffered(1);
    let playlist = config.finalize_radio_playlist(scores_as_recording).await?;

    PlaylistStub::new(
        "Radio: Listen Rate".to_string(),
        Some(username.to_string()),
        true,
        playlist.into_mbids(),
        Some(
            "Automatically generated by: https://github.com/RustyNova016/listenbrainz-cli-tools"
                .to_string(),
        ),
    )
    .send(token)
    .await?;

    Ok(())
}
