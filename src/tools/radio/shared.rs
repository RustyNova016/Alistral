use chrono::Duration;
use futures::stream;
use futures::StreamExt;
use interzic::models::playlist_stub::PlaylistStub;
use itertools::Itertools;
use tracing::info;

use crate::datastructures::radio::collector::RadioCollector;
use crate::datastructures::radio::filters::booleans::and_filter;
use crate::datastructures::radio::filters::cooldown::cooldown_filter;
use crate::datastructures::radio::filters::min_listens::min_listen_filter;
use crate::datastructures::radio::filters::timeouts::timeout_filter;
use crate::datastructures::radio::seeders::listens::ListenSeeder;
use crate::datastructures::radio::sorters::shared::shared_listens_sorter;
use crate::models::cli::radio::RadioExportTarget;
use crate::models::data_storage::DataStorage;
use crate::models::error::ResultTEExt as _;
use crate::tools::radio::convert_recordings;
use crate::utils::data_file::DataFile as _;

#[expect(clippy::too_many_arguments)]
pub async fn shared_radio(
    conn: &mut sqlx::SqliteConnection,
    seeder: ListenSeeder,
    other_user: String,
    min_listens: Option<u64>,
    cooldown: u64,
    collector: RadioCollector,
    token: &str,
    target: RadioExportTarget,
) -> color_eyre::Result<()> {
    let username = seeder.username().clone();

    info!("[Seeding] Getting listens");

    // Get the seeder
    let mut other_seeder = seeder.clone();
    let recordings = seeder
        .seed(conn)
        .await
        .expect_fatal("Couldn't find seed listens");
    other_seeder.username = other_user.clone();
    let other_recordings = other_seeder
        .seed(conn)
        .await
        .expect_fatal("Couldn't find seed listens");
    let other_recordings = other_recordings.into_iter().collect_vec();

    info!("[Filter] Filtering minimum listen count");
    let recordings = min_listen_filter(recordings.into_stream(), min_listens.unwrap_or(3));

    info!("[Filter] Filtering listen cooldown");
    let recordings = cooldown_filter(recordings, Duration::hours(cooldown as i64));

    info!("[Filter] Filtering listen timeouts");
    let recordings = timeout_filter(recordings);

    info!("[Filter] Filtering by other user");
    let recordings = and_filter(recordings, other_recordings.clone());

    info!("[Sorting] Calculating scores");
    let recordings = shared_listens_sorter(recordings, other_recordings).await;

    info!("[Finalising] Creating radio playlist");
    let collected = collector
        .collect(stream::iter(recordings).map(|r| r.recording().clone()))
        .await;

    info!("[Sending] Sending radio playlist to listenbrainz");
    let counter = DataStorage::load().expect_fatal("Couldn't load data storage");
    let playlist = PlaylistStub {
        title: format!(
            "Radio: Shared listens #{}",
            counter.write().unwrap().incr_playlist_count()
        ),
        description: format!(
            "
        A radio made from the listened recordings of {username} and {other_user}</br>

        Automatically generated by: https://github.com/RustyNova016/Alistral"
        ),
        recordings: convert_recordings(conn, collected)
            .await
            .expect_fatal("Couldn't convert recordings for playlist"),
    };

    target
        .export(playlist, Some(username), Some(token))
        .await
        .expect_fatal("Couldn't send the playlist");

    Ok(())
}
