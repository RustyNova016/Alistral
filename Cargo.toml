[package]
name = "alistral"
version = "0.4.5"
edition = "2021"
repository = "https://github.com/RustyNova016/alistral"
publish = true
license = "MIT"
description = "A CLI app containing a set of useful tools for Listenbrainz"
rust-version = "1.83.0"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
# Workspace dependencies
alistral_core = { path = "./alistral_core" }

# Musicbrainz dependencies
listenbrainz = "0.8.1"
musicbrainz-db-lite = { branch = "develop", git = "https://github.com/RustyNova016/musicbrainz_db_lite.git" }
#musicbrainz-db-lite = { version = "0.1.0", path = "../musicbrainz-db-lite" }

interzic = { path = "./interzic" }

derive_builder = "0.20.2"
inquire = "0.7.5"
itertools = "0.14.0"
color-eyre = "0.6.3"
rust_decimal = "1.36.0"
rust_decimal_macros = "1.36.0"
clap = { version = "4.5.26", features = [
    "unicode",
    "wrap_help",
    "derive",
    "color",
] }
clap_complete = "4.5.42"
chrono = "0.4.39"
serde = { version = "1.0.217", features = ["rc"] }
serde_json = "1.0.135"
extend = "1.2.0"
directories = "6.0.0"
indicatif = { version = "0.17.8", features = [
    "rayon",
    "improved_unicode",
    "futures",
] }
tokio = { version = "1.43.0", features = ["full"] }
rayon = "1.10.0"
reqwest = { version = "0.12.12", features = ["json"] }
rand = "0.8.5"
thiserror = "2.0.11"
derive_more = { version = "1.0.0", features = ["full"] }
derive-new = "0.7.0"
derive-getters = "0.5.0"
futures = "0.3.31"
humantime = "2.1.0"
regex = "1.11.0"
clap-markdown = "0.1.4"
log = "0.4.25"
serial_test = "3.1.1"
sqlx = { version = "0.8.3", features = ["runtime-tokio", "macros"] }
tracing = "0.1.41"
tracing-subscriber = "0.3.19"
macon = "1.3.0"
async-fn-stream = "0.2.2"
zip = "2.2.2"
indoc = "2.0.5"
strsim = "0.11.1"
strum_macros = "0.26.4"

# The profile that 'cargo dist' will build with
[profile.dist]
inherits = "release"
lto = "thin"

[lints.rust]
async_fn_in_trait = { level = "allow", priority = 1 }

# --- Workspace ---

[workspace]
members = ["./alistral_core", "interzic",]

[workspace.lints.rust]
unsafe_code = "forbid"

[workspace.lints.clippy]
#pedantic = "deny"
#nursery = "deny"
#perf = "warn"
#cargo = "warn"

# Applied
enum_glob_use = { level = "deny", priority = 1 }
semicolon_if_nothing_returned = { level = "warn", priority = 1 }
use_self = { level = "warn", priority = 1 }
or_fun_call = { level = "warn", priority = 1 }
match_same_arms = { level = "warn", priority = 1 }
manual_string_new = { level = "warn", priority = 1 }
doc_markdown = { level = "warn", priority = 1 }
uninlined_format_args = { level = "warn", priority = 1 }
explicit_iter_loop = { level = "warn", priority = 1 }
allow_attributes = { level = "warn", priority = 1 }
suboptimal_flops= { level = "warn", priority = 1 }

#unwrap_used = { level = "warn", priority = 1 } # Fix needed in separate PR

# Won't apply... Yet
must_use_candidate = { level = "allow", priority = 1 }
map_unwrap_or = { level = "allow", priority = 1 }

# # Config for 'cargo dist'
# [workspace.metadata.dist]
# # The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
# cargo-dist-version = "0.11.1"
# # CI backends to support
# ci = ["github"]
# # The installers to generate for each app
# installers = ["shell", "powershell"]
# # Target platforms to build apps for (Rust target-triple syntax)
# targets = [
#     "aarch64-apple-darwin",
#     "x86_64-apple-darwin",
#     "x86_64-unknown-linux-gnu",
#     "x86_64-pc-windows-msvc",
# ]
# # Publish jobs to run in CI
# pr-run-mode = "plan"